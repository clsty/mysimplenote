#+title: 一些简单的个人笔记 by clsty
注：本笔记可能存在时效性问题、主观问题甚至事实错误等，请酌情参考；也欢迎发 PR 和 issue。
* Linux
** Rsync
*** rsync 的 -a
-a 即 --archive，它相当于 -rlptgoD ，分别解释如下：
1. -r（--recursive）：以递归方式复制文件。这将使rsync复制目录及其所有内容，包括子目录和文件。
2. -l（--links）：保留符号链接。当源目录中存在符号链接时，该选项将复制符号链接的目标文件而不是符号链接本身。
3. -p（--perms）：保留文件的权限。使用该选项将保留文件的所有权和读/写/执行权限。
4. -t（--times）：保留文件的时间戳。使用该选项将复制源文件的修改时间和访问时间到目标文件。
5. -g（--group）：保留文件所属组。通过指定该选项，rsync将保留文件所属组而不进行更改。
6. -o（--owner）：保留文件所有者。该选项保留每个文件的所有者身份而不进行更改。
7. -D：保留特殊设备和特殊文件。

** iconv 批量转 ANSI 到 UTF-8
#+begin_src bash
  # 先将当前目录的目录结构复制到上级目录下的temp目录
    rsync -av --include '*/' --exclude '*' ./ ../temp/
  # 再批量地将当前目录中以 .txt 结尾的文件从编码GBK转UTF-8，但是报错的就不转换了
    for i in $(fd .txt);do iconv -f GBK -t UTF-8 "$i" -o ../temp/"$i"||rm ../temp/"$i";done
#+end_src
** mount
*** 强制 umount
若 umount 时提示“device is busy”，则可能是有进程在占用，可用 =fuser -m <mountpoint>= 来查看，
再 =fuser -ck <mountpoint>= 结束此进程即可。
*** 据 fstab 进行自动挂载
在修改了 fstab 之后，不会立即生效，可用 =mount -av= 来自动挂载。
* Arch Linux
Arch Linux 是滚动发行版，这里默认以最新版为例。
** 关于软件安装的坑
如果并不是要使用 kde 及 deepin 的 DE，则最好不要安装它们的软件。
例如，在 gnome 44 下，若安装了 deepin 的 camera（深度相机），实测按快捷键（笔者改绑到了 Super+F1 上）锁屏时，图形环境有一定几率崩溃。并且这会安装 deepin 的一大堆全家桶，包括几乎整个 DE。
再如，在 gnome 44 下，若安装了 dolphin，则你很可能搞不定它的主题（配置 qt5ct 和 qt6ct 均无用；kvantum 倒是应该可行），并且它会依赖 baloo，而它作为文件索引器，会长时间扫盘，从而可能造成系统卡顿（固态硬盘受影响可能较小）。而这个 baloo 实测是无法轻易使用 balooctl 关闭的。

如果不慎安装了这些，可以利用 octopi 批量选中软件包进行删除（deepin 的软件包几乎都以 deepin 开头，比较好删除），辅以 =sudo pacman -R $(pacman -Qdtq)= （需要执行多次）来删除不需要的依赖包。
** 加速 makepkg 的 git clone
方法：
将 =/usr/share/makepkg/source/git.sh= 即 [[https://unix.stackexchange.com/questions/154919/how-to-modify-a-pkgbuild-which-uses-git-sources-to-pull-only-a-shallow-clone][makepkg 所使用的 git 脚本文件]]中的 ~git clone~ 改成 ~git clone --filter=blob:none~ 。

一段达成此目的且满足幂等的命令可以这样写：
#+begin_src bash
t=/usr/share/makepkg/source/git.sh
sudo sed -i "s/git clone -s/git clone --filter=blob:none -s/g" $t
sudo sed -i "s/git clone --mirror/git clone --filter=blob:none --mirror/g" $t
#+end_src

（注： ~--filter=blob:none~ 类似于 ~--depth=1~ ，只是它不会像后者那样具有很多[[https://zhuanlan.zhihu.com/p/597688197][副作用]]。）

EDIT： ~--filter=blob:none~ 似乎是有着虽然流量降低了，但对象一个一个接收，于是导致总体速度极慢的效果，故应慎用。可能还是 ~--depth=1~ 比较实用。
** alist
*** 安装
从 aur 安装 =alist-bin= （ =alist= 已过时，不再推荐）即可。

安装完毕会提示如下信息：
#+begin_example
from alist 3.9.2-3, the alist user is used to run this service
if you are upgrading from a previous version
you have to run  the following commands in green only once
 sudo chown -R alist:alist /var/lib/alist
 sudo chown -R alist:alist /var/log/alist
 sudo chown -R alist:alist /etc/alist
 sudo chown -R alist:alist /var/cache/alist
and chown any other local files that are served by alist
#+end_example
*** 配置文件与密码
网上很多使用例（教程等）往往使用一键脚本或 docker 进行部署，具有相同的默认密码（如 =admin= 、 =password= 等）。

但是，如果你是在 Arch Linux 下（或许别的发行版也适用，未测试），则当你（注：不推荐这种方法！）直接运行 alist 时，它会自动生成一个初始密码。如果命令行没有显示，你可以使用 alist admin 查看（配置目录为当前工作目录或家目录下的 =data/= ）。

而如果使用 systemd 服务（注：推荐此方法，命令是 =sudo systemctl enable --now alist= ），那么 alist 服务（此配置文件为 =/usr/lib/systemd/system/alist.service= ）被默认配置的启动命令是 =/usr/bin/alist server --data /var/lib/alist= ，因此你查看密码的方式应当是：
#+begin_src bash
  sudo alist admin --data /var/lib/alist
#+end_src

如果你不这么做，而是直接使用 =alist admin= 来查看密码，你很可能会发现即使你复制粘贴密码它还是提示你密码不正确（“为什么 alist 密码正确还是提示密码错误”）。
当然，你也可以修改 systemd 的服务配置文件，将 =--data= 指向你想要的配置目录，但注意用包管理器给 alist 升级时此文件会被覆盖。

默认的端口为 5244。也即，在浏览器地址栏输入 [[http://0.0.0.0:5244]] 即可进入 alist 的管理页面。

*** 本地使用
除了直接在浏览器中使用外，alist 提供了 webdav 以便在本地进行操作，具体见其[[https://alist.nn.ci/zh/guide/webdav.html][文档]]。

在 Linux 下可使用 rclone 或 [[https://wiki.archlinux.org/title/Davfs2][davfs2]] 来访问此 webdav 服务。

**** rclone
rclone 提供了许多子命令，比如复制，可直接使用 =rclone copyto= 在本地与 rclone 远端（remote）之间复制文件。

这里特别提一下 mount 子命令，可以挂载 rclone 远端到本地目录。
它也常常在网上被提到，但请务必注意：
rclone mount 在写入文件（或者说，上传文件）到远端的稳定性上，远不如 ~rclone copyto~ 等直接的命令！！！
这主要是由于各大网盘总是会做一些针对第三方工具的限制。
具体的现象例如，当你写入一个文件，表面上成功了，但直接打开网盘后，网盘里却根本没有出现此文件。
如果你的网盘很良心（或者说你自己搭建一个网盘，这方面你可以用 seafile 等），没有做这种限制，那么你大可以随意。

总之，一般情况下，仅建议以只读方式进行挂载。

下面给出在 Arch Liunx 下（其他 Linux 发行版同理），将 alist 用 rclone 和 crontab 自动只读挂载到本地的一个例子。

首先安装相关软件（crontab 由 cronie 提供 ，rclone mount 调用的 fusermount 由 fuse3 提供）。
#+begin_src bash
  sudo pacman -S --needed cronie rclone fuse3
#+end_src
再配置 rclone：
#+begin_src bash
  rclone config
#+end_src
此时进入 rclone 的配置编辑界面。添加一个远端：
- name: alist
- type: webdav
- url: =http://0.0.0.0:5244/dav=
- vendor: other
- user: 就是 alist 的用户名。
- password: 就是 alist 的密码。
最后配置cronie：
#+begin_src bash
  sudo systemctl enable --now cronie
  mkdir ~/alist
  mkdir -p ~/.local/bin
  echo '#!/bin/bash
  /usr/bin/rclone mount --read-only alist: ~/alist &' > ~/.local/bin/mount-alist.sh
  chmod +x ~/.local/bin/mount-alist.sh
  cronie -e
#+end_src
此时弹出一个编辑器（取决于 =$EDITOR= 变量）用于编辑 crontab 任务的配置文件，在其中输入以下内容（注意最后一行是空的）：
#+begin_src crontab
  @reboot sh ~/.local/bin/mount-alist.sh
  
#+end_src
保存即可。

* Debian Linux
以下以 Debian 12 为例。
** sudo
=su= 可能不带必要的环境变量（包括 path 的），因此在 =su root= 之后，使用 =usermod= 等命令时可能会提示 =command not found= 。
此时最好使用 =su -= 。

Debian 默认没有 wheel 组，而是 sudo 组，所以用 =usermod -aG sudo <username>= 将用户加入该组即可。

** 软件安装
包管理器：apt。
*** 部分软件的安装方法举例
**** fd
- 地址：[[https://github.com/sharkdp/fd]]
- 包名： =fd-find=
- 命令： =fdfind= （注意不是 fd）
**** qbittorrent-enhanced-edition
- 地址：[[https://github.com/c0re100/qBittorrent-Enhanced-Edition]]
- 安装方法：据 [[https://software.opensuse.org//download.html?project=home%3Anikoneko%3Atest&package=qbittorrent-enhanced-nox][Install package home:nikoneko:test / qbittorrent-enhanced-nox]]，依次运行以下命令：
#+begin_src bash
echo 'deb http://download.opensuse.org/repositories/home:/nikoneko:/test/Debian_12/ /' | sudo tee /etc/apt/sources.list.d/home:nikoneko:test.list
curl -fsSL https://download.opensuse.org/repositories/home:nikoneko:test/Debian_12/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/home_nikoneko_test.gpg > /dev/null
sudo apt update
sudo apt install qbittorrent-enhanced-nox
#+end_src
其中第二步如果 curl 报错，可以考虑将 https 改为 http。
**** alist
- 地址：[[https://github.com/Xhofe/alist]]
- 安装方法：
运行
#+begin_src bash
curl -fsSL "https://alist.nn.ci/v3.sh"|sudo bash -s install
#+end_src
* Emacs
** quelpa 安装插件一例
#+begin_src elisp
(use-package quelpa
 :ensure t
 :commands quelpa
 :custom
 (quelpa-git-clone-depth 1)
 (quelpa-self-upgrade-p nil)
 (quelpa-update-melpa-p nil)
 (quelpa-checkout-melpa-p nil))
(quelpa
 '(evil-tutor-sc
	 :fetcher git
	 :files (:defaults "tutor-sc.txt")
	 :url "https://github.com/clsty/evil-tutor-sc.git"))
#+end_src

* GitHub
一些冷知识：
- 自述文档（README）（按优先级从高到低排序）可以位于仓库的 =.github/= 、根目录、 =docs/= 。
- GitHub 支持渲染的文档格式见 [[https://github.com/github/markup][github/markup]]。
  - 对 org-mode 的测试见 [[./test.org]]。

* Firefox
** 附加组件（add-ons）
*** 主题
*** 扩展
以下给出对若干扩展进行简单测试的一些记录。

请注意，时效性可能不强。
也即，它很可能不完全适用于你看到此文时这些扩展的实际情形。

若想补充，可提交 PR。
**** 侧边标签栏
- [[https://addons.mozilla.org/en-US/firefox/addon/sidebery/][Sidebery]]：
  - 可显示出标签页所在的容器颜色。
  - 允许多面板（panel）。
  - 以缩进标记出标签之间的先后关系。
- [[https://addons.mozilla.org/en-US/firefox/addon/grasshopper-urls][Grasshopper]]：待测试。
**** 书签容器
背景：
- 想要用好容器，除了安装官方的 [[https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers][Firefox Multi-Account Containers]] 以外，我们还面临一个问题：
假如你真的需要在同一网站上使用多个账号，默认情况下，你需要在标签页或什么地方用右键菜单切换容器。
这无疑很麻烦。
- 那么，有没有什么扩展，可以让你的书签中包含“以指定容器打开”的这种信息呢？
答案是肯定的。这里，我简单测试了若干实现此功能的扩展。

- [[https://addons.mozilla.org/en-US/firefox/addon/containmarks][ContainMarks]]（推荐）：添加过程很方便，也确实可用。
  - 对书签条目的影响：在 url 前面添加 =about:xxx:= ，其中 =xxx= 是一段随机字符串。
- [[https://addons.mozilla.org/en-US/firefox/addon/container-bookmarks/][Container Bookmarks]]：确实可用，但添加过程过于繁琐。
  - 对书签条目的影响：在 url 末尾添加 =#xxx= 的参数。
- [[https://github.com/vances678/ContainerBookmarks][Container Bookmarks]]（是的，与前一个同名）：添加过程很方便，但似乎因为需要访问 [[s2.googleusercontent.com]] 而导致在国内无法使用（会报错）。
  - 对书签条目的影响：在 url 前面添加 =moz-extension://xxx...= 的一大长串。
**** 其他扩展
- 待探索：
  - https://addons.mozilla.org/en-US/firefox/addon/conex/
**** 新标签页
- [[https://addons.mozilla.org/en-US/firefox/addon/ya-bookmarks-on-new-tab][Bookmarks on New Tab]]
  - 启动速度超快。
  - 存在一个严重缺陷：会把文件夹与书签条目混在一起，干扰使用。
- [[https://addons.mozilla.org/en-US/firefox/addon/bookmarked-speeddial][Bookmarked Speed Dial]]
  - 启动速度较慢。
** 密码等登录信息的所在文件
注：此方法仅在 Firefox 115.0.2 版本上进行了测试。

如果你的 Firefox 的某个 profile 损坏，启动 Firefox 时会卡住，可以使用 =-p= 参数打开 profile 管理器来新建一个 profile。
但是，假如损坏的那个 profile 含有某些登录信息（账户密码），你可能会想要把它迁移到新的 profile 中。

因此，你需要复制 profile 目录（为 =~/.mozilla/firefox= 下的某个目录）中的以下文件：
=key4.db= 、 =logins.json= 、 =signedInUser.json= 。
** 修改限制扩展修改的域名
Firefox 对某些域名进行了保护，以防其被扩展修改，这无疑增强了（使用了任何你无法完全信任的扩展时的）安全性，却降低了便利性。
比如，你将无法在 [[mozilla.org]] 使用 Dark Reader。

如果你能够完全信任你的所有扩展，则你可以：
- 访问 [[about:config]] 。
- 搜索 =extensions.webextensions.restrictedDomains= 。
- 其默认值为
  #+begin_example
  accounts-static.cdn.mozilla.net,accounts.firefox.com,addons.cdn.mozilla.net,addons.mozilla.org,api.accounts.firefox.com,content.cdn.mozilla.net,discovery.addons.mozilla.org,install.mozilla.org,oauth.accounts.firefox.com,profile.accounts.firefox.com,support.mozilla.org,sync.services.mozilla.com,autoatendimento.bb.com.br,ibpf.sicredi.com.br,ibpj.sicredi.com.br,internetbanking.caixa.gov.br,www.ib12.bradesco.com.br,www2.bancobrasil.com.br
  #+end_example
  按需修改即可，比如改为
  #+begin_example
  accounts-static.cdn.mozilla.net,accounts.firefox.com,addons.cdn.mozilla.net,api.accounts.firefox.com,content.cdn.mozilla.net,install.mozilla.org,sync.services.mozilla.com
  #+end_example
- 再搜索 =privacy.resistFingerprinting.block_mozAddonManager= ，将其值改为 true。
以上。此时大多数扩展应当对 [[mozilla.org]] 等域名可用了。

但是，部分扩展仍需进一步设置，比如 Dark Reader，因为它默认自行检测域名是否被限制，即使此时已经取消了限制，它也不会尝试运行。
对于 Dark Reader 的设置方法：
- 依次点击 Dark Reader 扩展图标 -> Dev tools -> Preview new design。
- 再次点击 Dark Reader 扩展图标，此时的交互界面应当已经改变。
- 点击 Settings -> Site list -> Enable on restricted pages。
此时 Dark Reader 在 [[mozilla.org]] 上就可用了。
当然，交互界面也变成新的了，如果你是老用户，你可能需要适应一下。
注意如果切回老界面，则此设置会立即失效。

** 重定向
这里所说的重定向插件，不仅是在地址栏或其他方式打开某个网址时的重定向，也是页面中请求资源的重定向（比如图片的链接）。

尝试了 gooreplacer，据其文档，应该是一个很有趣的插件，但很可惜实际测试完全无法使用，很可能是 Firefox 更新而此插件没跟上版本所导致的。

可用的是 HeaderEditor。
** 跳过下载文件的最后几秒停顿
在 about:config 中找到 =browser.safebrowsing.downloads.enabled= ，值改为 false 即可。
** 禁用 DRM 提示
Firefox 可以关闭 DRM。但即使关闭了，在打开一些页面（比如 Bilibili 上的某个电影，注意同一页面可能只有第一次才会提示）时，还是可能跳出打开 DRM 的提示。

*** 方法
这个提示没有直接关闭的方法，但是可以通过修改 =userChrome.css= 来定制 Firefox 的界面来关闭。

具体方法是：
- 打开 =about:config= ，将 =toolkit.legacyUserProfileCustomizations.stylesheets= 的值设为 true。
- 在 Firefox 的 profile 目录（可打开 =about:support= 查看 profile directory）下新建 chrome 文件夹。
- 在 chrome 文件夹下新建 =userChrome.css= 文件。编辑内容为：
#+begin_src css
notification-message[value="drmContentDisabled"] {
    display: none !important;
}
#+end_src

注意，开头 *不要* 加
#+begin_src css
@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
#+end_src
虽然它仍然挂在 [[http://kb.mozillazine.org/UserChrome.css]] 这个页面上，但实测加了它反而会导致上面的那个配置无效。
原因据说是，Firefox 已经从 XUL 更换到更标准的网络技术栈，由于旧的 XUL 命名空间可能不适用于新的 UI 元素，所以这一句可能导致问题。

*** 原理
这个提示，是 Firefox 用户界面的一部分（即，并不是网页的一部分），所以要对 Firefox 用户界面本身进行修改。

这就要用到 =userChrome.css= 了。当然，得先启用它。

然后，具体的配置内容，如何知道是 ~notification-message[value="drmContentDisabled"]~ 呢？

方法是：F12 打开开发者面板，面板右上方三点里找设置（齿轮图标）。
再从 Advanced settings 里勾选“Enable browser chrome and add-on debugging toolboxes”和“Enable remote debugging”。

此时再按 =Ctrl+Alt+Shift+I= 来打开 Browser Toolbox，同意调试之后，会发现多出来一个窗口，这个窗口里面就可以找到 Firefox 界面中的元素了（使用方法类似普通的开发者工具即 F12）。
定位到 drm 相关的，可以发现通知所在的代码部分中有一句：
#+begin_src html
<notification-message xmlns="http://www.w3.org/1999/xhtml" message-bar-type="infobar" dismissable="" value="drmContentDisabled" type="info" style="" class="animated"><div></div></notification-message>
#+end_src
这就是上面那个配置的依据了。

参考链接：
- https://icloudnative.io/posts/customize-firefox
- http://kb.mozillazine.org/UserChrome.css
- https://support.mozilla.org/zh-CN/questions/1121195
